[{"D:\\JAVASCRIPT\\online-epidemic\\src\\index.js":"1","D:\\JAVASCRIPT\\online-epidemic\\src\\App.js":"2","D:\\JAVASCRIPT\\online-epidemic\\src\\redux\\store.js":"3","D:\\JAVASCRIPT\\online-epidemic\\src\\redux\\reducers\\login_reducer.js":"4","D:\\JAVASCRIPT\\online-epidemic\\src\\redux\\reducers\\user_reducer.js":"5","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\homepage\\homepage.jsx":"6","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\topnav\\topnav.jsx":"7","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\epidemictime\\epidemictime.jsx":"8","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\epidemicmap\\epidemicmap.jsx":"9","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\share\\share.jsx":"10","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\UserJump\\index.jsx":"11","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Register\\index.jsx":"12","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Login\\index.jsx":"13","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\epidemicmap\\world.js":"14","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\epidemicmap\\china.js":"15","D:\\JAVASCRIPT\\online-epidemic\\src\\redux\\actions\\login_action.js":"16","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Admin\\index.jsx":"17","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\User\\index.jsx":"18","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserTopNav\\index.jsx":"19","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserMain\\index.jsx":"20","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserMenu\\index.jsx":"21","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Normal\\index.jsx":"22","D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Publisher\\index.jsx":"23","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\PublisherMod\\index.jsx":"24","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\CreatePaperList\\index.jsx":"25","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserInformation\\index.jsx":"26","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserInformation\\ChangePassword\\index.jsx":"27","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserInformation\\ChangeInformation\\index.jsx":"28","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\CreateTopicList\\index.jsx":"29","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\CreateTopicList\\Topiclist\\index.jsx":"30","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\CreateTopicList\\CreateTopic\\index.jsx":"31"},{"size":663,"mtime":1613805532391,"results":"32","hashOfConfig":"33"},{"size":2011,"mtime":1618405522936,"results":"34","hashOfConfig":"33"},{"size":891,"mtime":1613805449743,"results":"35","hashOfConfig":"33"},{"size":374,"mtime":1615988715665,"results":"36","hashOfConfig":"33"},{"size":305,"mtime":1612848016645,"results":"37","hashOfConfig":"33"},{"size":8378,"mtime":1613460999734,"results":"38","hashOfConfig":"33"},{"size":2242,"mtime":1618494441133,"results":"39","hashOfConfig":"33"},{"size":4878,"mtime":1613659370116,"results":"40","hashOfConfig":"33"},{"size":13490,"mtime":1613407038269,"results":"41","hashOfConfig":"33"},{"size":4083,"mtime":1615990020875,"results":"42","hashOfConfig":"33"},{"size":1224,"mtime":1615991513917,"results":"43","hashOfConfig":"33"},{"size":7516,"mtime":1613803532897,"results":"44","hashOfConfig":"33"},{"size":4243,"mtime":1615996036989,"results":"45","hashOfConfig":"33"},{"size":1010260,"mtime":1613379505762,"results":"46","hashOfConfig":"33"},{"size":654325,"mtime":1613314253172,"results":"47","hashOfConfig":"33"},{"size":172,"mtime":1613658866353,"results":"48","hashOfConfig":"33"},{"size":1132,"mtime":1618494944443,"results":"49","hashOfConfig":"33"},{"size":1390,"mtime":1618304807180,"results":"50","hashOfConfig":"33"},{"size":1170,"mtime":1618405229299,"results":"51","hashOfConfig":"33"},{"size":2254,"mtime":1618406298194,"results":"52","hashOfConfig":"33"},{"size":3006,"mtime":1618405345194,"results":"53","hashOfConfig":"33"},{"size":426,"mtime":1615989583384,"results":"54","hashOfConfig":"33"},{"size":1093,"mtime":1618309360365,"results":"55","hashOfConfig":"33"},{"size":34645,"mtime":1618304874058,"results":"56","hashOfConfig":"33"},{"size":6545,"mtime":1618304757627,"results":"57","hashOfConfig":"33"},{"size":666,"mtime":1618323607961,"results":"58","hashOfConfig":"33"},{"size":1865,"mtime":1618326990590,"results":"59","hashOfConfig":"33"},{"size":1414,"mtime":1618402935871,"results":"60","hashOfConfig":"33"},{"size":731,"mtime":1618406364572,"results":"61","hashOfConfig":"33"},{"size":275,"mtime":1618406356081,"results":"62","hashOfConfig":"33"},{"size":19101,"mtime":1618421279917,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"tbdw3g",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"D:\\JAVASCRIPT\\online-epidemic\\src\\index.js",[],["128","129"],"D:\\JAVASCRIPT\\online-epidemic\\src\\App.js",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\redux\\store.js",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\redux\\reducers\\login_reducer.js",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\redux\\reducers\\user_reducer.js",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\homepage\\homepage.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\topnav\\topnav.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\epidemictime\\epidemictime.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\epidemicmap\\epidemicmap.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\share\\share.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\UserJump\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Register\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Login\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\epidemicmap\\world.js",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\epidemicmap\\china.js",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\redux\\actions\\login_action.js",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Admin\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\User\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserTopNav\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserMain\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserMenu\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Normal\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\pages\\Publisher\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\PublisherMod\\index.jsx",["130"],"import React, { Component } from 'react'\r\n// import { Link } from 'react-router-dom'\r\nimport style from './index.module.css'\r\nimport { Form, Input, Button, Select, Modal, Menu, Dropdown, Radio, Checkbox, Row, Col } from 'antd';\r\nimport { UserOutlined, DownOutlined } from '@ant-design/icons';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n      span: 4,\r\n    },\r\n    wrapperCol: {\r\n      span: 12,\r\n    },\r\n  };\r\n\r\nconst addButtonLayout = {\r\n    wrapperCol: {\r\n      offset: 4,\r\n      span: 16,\r\n    },\r\n};\r\n\r\nconst singletype = {\r\n    type: \"singletype\",\r\n    title: \"\",\r\n    optionlength: 4,\r\n    option: [\"\",\"\",\"\",\"\"],\r\n    answer: [\"\"],\r\n    analyze: \"\"\r\n}\r\n\r\nconst multitype = {\r\n    type: \"multitype\",\r\n    title: \"\",\r\n    optionlength: 4,\r\n    option: [\"\",\"\",\"\",\"\"],\r\n    answer: [\"\"],\r\n    analyze: \"\"\r\n}\r\n\r\nconst judgetype = {\r\n    type: \"judgetype\",\r\n    title: \"\",\r\n    answer: \"\",\r\n    analyze: \"\"\r\n}\r\n\r\nconst gaptype = {\r\n    type: \"gaptype\",\r\n    title: \"\",\r\n    optionlength: 1,\r\n    option: [\"\"],\r\n    analyze: \"\"\r\n}\r\n\r\nconst shorttype = {\r\n    type: \"shorttype\",\r\n    title: \"\",\r\n    answer: \"\",\r\n    analyze: \"\"\r\n}\r\n\r\nconst textpreviewvalue = [\r\n    {\r\n        analyze: \"\",\r\n        answer: \"A\",\r\n        option: [\"123\", \"123123\", \"1231233\", \"12\"],\r\n        optionlength: 4,\r\n        title: \"123123\",\r\n        type: \"singletype\"\r\n    },\r\n    {\r\n        analyze: \"\",\r\n        answer: [\"A\",\"B\"],\r\n        option: [\"123\", \"123123\", \"1231233\", \"12\"],\r\n        optionlength: 4,\r\n        title: \"123123\",\r\n        type: \"multitype\"\r\n    },\r\n    {\r\n        analyze: \"123123\",\r\n        answer: \"√\",\r\n        title: \"123213123\",\r\n        type: \"judgetype\"\r\n    },\r\n    {\r\n        analyze: \"\",\r\n        option: [\"123123\", \"123123123\"],\r\n        optionlength: 2,\r\n        title: \"123123\",\r\n        type: \"gaptype\"\r\n    }\r\n]\r\n\r\nconst {TextArea} = Input\r\n\r\nclass CreateTest extends Component{\r\n\r\n    paperPreviewRef = React.createRef()\r\n\r\n    state = {\r\n        loading: false,\r\n        visible: false,\r\n        defaultquestion: \"选择题目\",\r\n        optiondefault: 0,\r\n        optiondefaultValue: [],\r\n        papername: \"123123\",\r\n        paperbrief: \"\",\r\n        paperstyle: \"\",\r\n        papertime: \"\",\r\n        paperpassword: \"\",\r\n        singletype: singletype,\r\n        resetsingle: singletype,\r\n        multitype: multitype,\r\n        resetmulti: multitype,\r\n        judgetype: judgetype,\r\n        resetjudge: judgetype,\r\n        gaptype: gaptype,\r\n        resetgap: gaptype,\r\n        shorttype: shorttype,\r\n        resetshort: shorttype,\r\n        nowqusetiontype: \"\",\r\n        paperPreviewValue: textpreviewvalue,\r\n        warning: \"\"\r\n    };\r\n\r\n    componentDidMount(){\r\n        console.log(\"publishermoded mount: \", this.props)\r\n    }\r\n    \r\n    componentDidUpdate (preProps, preState) {\r\n        console.log(\"publishermoded update: \", this.props)\r\n        // console.log(\"did update\", preState, this.state)\r\n        if(this.state.optiondefault === 1){\r\n            let st = this.state[this.state.nowqusetiontype]\r\n            if(st.optionlength < 9){\r\n                st.option.push(\"\")\r\n                st.optionlength++\r\n                this.setState({[this.state.nowqusetiontype]: st, optiondefault: 0})\r\n            }\r\n        }else if(this.state.optiondefault === 2){\r\n            let st = this.state[this.state.nowqusetiontype]\r\n            if(st.optionlength > 1){\r\n                st.option.pop()\r\n                st.optionlength--\r\n                this.setState({[this.state.nowqusetiontype]: st, optiondefault: 0})\r\n            }\r\n        }\r\n        if(preState.defaultquestion !== this.state.defaultquestion){\r\n            if(this.state.defaultquestion === \"单选题\"){\r\n                this.setState({nowqusetiontype: \"singletype\"})\r\n            }else if(this.state.defaultquestion === \"多选题\"){\r\n                this.setState({nowqusetiontype: \"multitype\"})\r\n            }else if(this.state.defaultquestion === \"判断题\"){\r\n                this.setState({nowqusetiontype: \"judgetype\"})\r\n            }else if(this.state.defaultquestion === \"填空题\"){\r\n                this.setState({nowqusetiontype: \"gaptype\"})\r\n            }else if(this.state.defaultquestion === \"简答题\"){\r\n                this.setState({nowqusetiontype: \"shorttype\"})\r\n            }\r\n        }\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n        visible: true,\r\n        });\r\n    };\r\n    //提交题目\r\n    handleOk = () => {\r\n        this.setState({ loading: true });\r\n        setTimeout(() => {\r\n        this.setState({ loading: false, visible: false });\r\n        }, 3000);\r\n        let warningsingle = \"\"\r\n        let st = this.state[this.state.nowqusetiontype]\r\n        let paperPreviewValue = this.state.paperPreviewValue\r\n        if(st.title === \"\"){\r\n            warningsingle += \"题目 · \"\r\n        }\r\n        if(this.state.nowqusetiontype === \"singletype\" || this.state.nowqusetiontype === \"multitype\" || this.state.nowqusetiontype === \"gaptype\"){\r\n            for (let index = 0; index < st.option.length; index++) {\r\n                const element = st.option[index];\r\n                if(element === \"\"){\r\n                    warningsingle += \"选项 · \"\r\n                }\r\n                break\r\n            }\r\n            if(this.state.nowqusetiontype !== \"gaptype\"){\r\n                for (let index = 0; index < st.answer.length; index++) {\r\n                    const element = st.answer[index];\r\n                    if(element === \"\"){\r\n                        warningsingle += \"答案 · \"\r\n                    }\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        if(this.state.nowqusetiontype === \"judgetype\" || this.state.nowqusetiontype === \"shorttype\"){\r\n            if(st.answer === \"\"){\r\n                warningsingle += \"答案 · \"\r\n            }\r\n        }\r\n        \r\n        if(warningsingle !== \"\"){\r\n            warningsingle += \"不能为空\"\r\n        }else{\r\n            paperPreviewValue.push(st)\r\n        }\r\n        console.log(\"okokok submit: \", this.state.nowqusetiontype, this.state[this.state.nowqusetiontype])\r\n        this.setState({warning: warningsingle,paperPreviewValue: paperPreviewValue})\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({ visible: false });\r\n    };\r\n\r\n    handleMenuClick = (item) =>{\r\n        console.log(\"menu click next qustion type\", item.domEvent.target.innerText)\r\n        console.log(\"menu click pre qustion type\", this.state.nowqusetiontype)\r\n        console.log(\"menu click pre qustio value\", this.state[this.state.nowqusetiontype])\r\n        this.setState({defaultquestion: item.domEvent.target.innerText})\r\n    }\r\n    //当问题标题更改时触发次函数\r\n    handleTitleChange = (e) => {\r\n        // console.log(\"title value:\", e.target.value)\r\n        let st = this.state[this.state.nowqusetiontype]\r\n        st.title = e.target.value\r\n        this.setState({[this.state.nowqusetiontype]: st})\r\n    }\r\n    //当选项的答案更改时触发此函数\r\n    handleValueClick = (e) =>{\r\n        // console.log(\"menu value:\", e)\r\n        let st = this.state[this.state.nowqusetiontype]\r\n        if(this.state.nowqusetiontype === \"singletype\" || this.state.nowqusetiontype === \"judgetype\" || this.state.nowqusetiontype === \"shorttype\"){\r\n            st.answer = e.target.value\r\n        }else if(this.state.nowqusetiontype === \"multitype\"){\r\n            st.answer = e\r\n        }\r\n       \r\n        this.setState({[this.state.nowqusetiontype]: st})\r\n    }\r\n    //当选项的各项的值改变的时候触发此函数\r\n    handleOptionChange = (e) => {\r\n        // console.log(\"Option value:\", e)\r\n        let st = this.state[this.state.nowqusetiontype]\r\n        if(this.state.nowqusetiontype === \"singletype\"){\r\n            let num = e.target.id.split(\"singleoption\")[1]\r\n            st.option[Number(num)] = e.target.value\r\n        }else if(this.state.nowqusetiontype === \"multitype\"){\r\n            let num = e.target.id.split(\"multioption\")[1]\r\n            st.option[Number(num)] = e.target.value\r\n        }else if(this.state.nowqusetiontype === \"gaptype\"){\r\n            let num = e.target.id.split(\"gapoption\")[1]\r\n            st.option[Number(num)] = e.target.value\r\n        }\r\n        this.setState({[this.state.nowqusetiontype]: st})\r\n    }\r\n    //当选项的解析改变的时候触发此函数\r\n    handleAnalyzeChange = (e) => {\r\n        // console.log(\"Option value:\", e)\r\n        let st = this.state[this.state.nowqusetiontype]\r\n        st.analyze = e.target.value\r\n        this.setState({[this.state.nowqusetiontype]: st})\r\n    }\r\n    //删除试卷预览中的第i题\r\n    deletePreviewQustion = (i) => {\r\n        let ppv = this.state.paperPreviewValue\r\n        ppv.splice(i,1)\r\n        this.setState({paperPreviewValue: ppv})\r\n    }\r\n    render() {\r\n        const { visible, loading } = this.state;\r\n\r\n        const submitPaper = {\r\n            papername: this.state.papername.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n            paperbrief: this.state.paperbrief.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n            paperstyle: this.state.paperstyle.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n            papertime: this.state.papertime.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n            paperpassword: this.state.paperpassword.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n            papervalue: JSON.stringify(this.state.paperPreviewValue).replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n            paperdate: \"\",\r\n            user_account: this.props.username.replace(/(^\\s*)|(\\s*$)/g, \"\") \r\n        }\r\n        const menu = (\r\n            <Menu onClick={(item)=>this.handleMenuClick(item)}>\r\n                <Menu.Item key=\"singleq\" icon={<UserOutlined />}>\r\n                单选题\r\n                </Menu.Item>\r\n                <Menu.Item key=\"multiq\" icon={<UserOutlined />}>\r\n                多选题\r\n                </Menu.Item>\r\n                <Menu.Item key=\"judgeq\" icon={<UserOutlined />}>\r\n                判断题\r\n                </Menu.Item>\r\n                <Menu.Item key=\"gapq\" icon={<UserOutlined />}>\r\n                填空题\r\n                </Menu.Item>\r\n                <Menu.Item key=\"shortq\" icon={<UserOutlined />}>\r\n                简答题\r\n                </Menu.Item>\r\n            </Menu>\r\n        );\r\n        const onFinish = (values) => {\r\n            console.log(\"success\")\r\n            this.axios.post(\"/users/paper/onloadPaper\", {paper: submitPaper})\r\n            .then((res) => {\r\n                console.log(\"SUCESS SUBMIT: \", res.data)\r\n            })\r\n        }\r\n        const onFinishFailed = (values) => {\r\n            console.log(\"fail: \", submitPaper)\r\n            this.axios.post(\"/users/paper/onloadPaper\", {paper: submitPaper})\r\n            .then((res) => {\r\n                console.log(\"asdlsadkj: \", res.data)\r\n            })\r\n        }\r\n      return (\r\n            <div style={{width: \"100%\",margin: \"50px auto\"}}>\r\n                <Form \r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                >\r\n                    <Form.Item\r\n                    {...formItemLayout}\r\n                        name=\"papername\"\r\n                        label=\"考卷名称\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input onChange={(e) => {this.setState({papername: e.target.value})}}/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                    {...formItemLayout}\r\n                        name=\"paperstyle\"\r\n                        label=\"考卷类型\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input onChange={(e) => {this.setState({paperstyle: e.target.value})}}/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                    {...formItemLayout}\r\n                        name=\"paperbrief\"\r\n                        label=\"考卷简介\"\r\n                    >\r\n                        <TextArea onChange={(e) => {this.setState({paperbrief: e.target.value})}}/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                    {...formItemLayout}\r\n                        name=\"papertime\"\r\n                        label=\"考卷时长\"\r\n                    >\r\n                        <Input onChange={(e) => {this.setState({papertime: e.target.value})}}/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                    {...formItemLayout}\r\n                        name=\"paperpassword\"\r\n                        label=\"考卷密码\"\r\n                    >\r\n                        <Input onChange={(e) => {this.setState({paperpassword: e.target.value})}}/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        {...addButtonLayout}\r\n                        name=\"paperaddquestion\"\r\n                    >\r\n                        <Button  onClick={this.showModal}>添加题目</Button>\r\n                        <Modal\r\n                            visible={visible}\r\n                            title=\"Title\"\r\n                            onOk={this.handleOk}\r\n                            onCancel={this.handleCancel}\r\n                            width={800}\r\n                            footer={[\r\n                                <Button key=\"back\" onClick={this.handleCancel} >\r\n                                Return\r\n                                </Button>,\r\n                                <Button key=\"submit\" type=\"primary\" loading={loading} onClick={this.handleOk}>\r\n                                Submit\r\n                                </Button>,\r\n                                <Button\r\n                                key=\"link\"\r\n                                href=\"https://google.com\"\r\n                                type=\"primary\"\r\n                                loading={loading}\r\n                                onClick={this.handleOk}\r\n                                style={{\r\n                                    marginLeft: \"10px\"\r\n                                }}\r\n                                >\r\n                                Search on Google\r\n                                </Button>,\r\n                            ]}\r\n                            >\r\n                            <div>\r\n                                <Button>自建题目</Button>\r\n                                <Button>题库搜索</Button>\r\n                            </div>\r\n                            <div>\r\n                                <div>\r\n                                    <Dropdown overlay={menu}>\r\n                                        <Button className=\"ant-dropdown-link\">\r\n                                        { this.state.defaultquestion } <DownOutlined />\r\n                                        </Button>\r\n                                    </Dropdown>\r\n                                </div>\r\n                                <div>\r\n                                    <div className=\"single\" style={{display: this.state.defaultquestion === \"单选题\" ? \"block\" : \"none\"}}>\r\n                                        <Form>\r\n                                            <Form.Item\r\n                                                name=\"singeTitle\"\r\n                                                label=\"题目\"\r\n                                                rules={[{ required: true, message: 'Please input your password!' }]}\r\n                                            >\r\n                                                <TextArea placeholder=\"题目\" onChange={(e) => this.handleTitleChange(e)}/>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"选项\"\r\n                                                rules={[{ required: true, message: 'Please input your password!' }]}\r\n                                                style={{fontFamily:\"monospace\"}}\r\n                                                >\r\n                                                <Form.Item\r\n                                                    name=\"singeOption\"\r\n                                                >\r\n                                                    {\r\n                                                        [...Array(this.state.singletype.optionlength)].map((el,i) => {\r\n                                                            return(\r\n                                                                <Input addonBefore={String.fromCharCode(65 + i*1)} id={\"singleoption\" + i} key={\"singleoption\" + i} onChange={(e) => this.handleOptionChange(e)}/>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </Form.Item>\r\n                                                <Button onClick={() => {this.setState({optiondefault: 1})}}>点击增加</Button>\r\n                                                <Button onClick={() => {this.setState({optiondefault: 2})}}>点击减少</Button>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"singeAnswer\"\r\n                                                label=\"答案\"\r\n                                                rules={[{required: true}]}\r\n                                            >\r\n                                                <Radio.Group onChange={(e) => this.handleValueClick(e)}>\r\n                                                {\r\n                                                    [...Array(this.state.singletype.optionlength)].map((el,i) => {\r\n                                                        return(\r\n                                                            <Radio value={String.fromCharCode(65 + i*1)}  key={\"singleanswer\" + i}>{String.fromCharCode(65 + i*1)}</Radio>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                </Radio.Group>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"singeAnalyze\"\r\n                                                label=\"解析\"\r\n                                            >\r\n                                                <TextArea onChange={(e) => this.handleAnalyzeChange(e)}></TextArea>\r\n                                            </Form.Item>\r\n                                        </Form>\r\n                                    </div>\r\n                                    <div className=\"multi\"  style={{display: this.state.defaultquestion === \"多选题\" ? \"block\" : \"none\"}}>\r\n                                        <Form>\r\n                                            <Form.Item\r\n                                                name=\"multiTitle\"\r\n                                                label=\"题目\"\r\n                                                rules={[{ required: true, message: 'Please input your password!' }]}\r\n                                            >\r\n                                                <TextArea placeholder=\"题目\" onChange={(e) => this.handleTitleChange(e)}/>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"选项\"\r\n                                                name=\"multiOption\"\r\n                                                rules={[{ required: true, message: 'Please input your password!' }]}\r\n                                                style={{fontFamily:\"monospace\"}}\r\n                                            >\r\n                                                    {\r\n                                                        [...Array(this.state.multitype.optionlength)].map((el,i) => {\r\n                                                            return(\r\n                                                                <Input addonBefore={String.fromCharCode(65 + i*1)} id={\"multioption\" + i} key={\"multioption\" + i} onChange={(e) => this.handleOptionChange(e)}/>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                <Button onClick={() => {this.setState({optiondefault: 1})}}>点击增加</Button>\r\n                                                <Button onClick={() => {this.setState({optiondefault: 2})}}>点击减少</Button>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"multiAnswer\"\r\n                                                label=\"答案\"\r\n                                                rules={[{required: true}]}\r\n                                            >\r\n                                                <Checkbox.Group style={{ width: '100%' }} onChange={(e) => this.handleValueClick(e)}>\r\n                                                    <Row>\r\n                                                    {\r\n                                                        [...Array(this.state.multitype.optionlength)].map((el,i) => {\r\n                                                            return(\r\n                                                                <Col span={4}  key={\"multianswer\" + i}>\r\n                                                                    <Checkbox value={String.fromCharCode(65 + i*1)}>{String.fromCharCode(65 + i*1)}</Checkbox>\r\n                                                                </Col>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                    </Row>\r\n                                                </Checkbox.Group>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"multiAnalyze\"\r\n                                                label=\"解析\"\r\n                                            >\r\n                                                <TextArea onChange={(e) => this.handleAnalyzeChange(e)}></TextArea>\r\n                                            </Form.Item>\r\n                                        </Form>\r\n                                    </div>\r\n                                    <div className=\"judge\"  style={{display: this.state.defaultquestion === \"判断题\" ? \"block\" : \"none\"}}>\r\n                                        <Form>\r\n                                            <Form.Item\r\n                                                name=\"judgeTitle\"\r\n                                                label=\"题目\"\r\n                                                rules={[{ required: true, message: 'Please input your password!' }]}\r\n                                            >\r\n                                                <Input placeholder=\"题目\" onChange={(e) => this.handleTitleChange(e)}/>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"judgeAnswer\"\r\n                                                label=\"答案\"\r\n                                                rules={[{required: true}]}\r\n                                            >\r\n                                                <Radio.Group onChange={(e) => this.handleValueClick(e)}>\r\n                                                    <Radio value={\"√\"}  key={\"judgeAnswerTrue\"}>√</Radio>\r\n                                                    <Radio value={\"×\"}  key={\"judgeAnswerFalse\"}>×</Radio>\r\n                                                </Radio.Group>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"judgeAnalyze\"\r\n                                                label=\"解析\"\r\n                                            >\r\n                                                <TextArea onChange={(e) => this.handleAnalyzeChange(e)}></TextArea>\r\n                                            </Form.Item>\r\n                                        </Form>\r\n                                    </div>\r\n                                    <div className=\"gap\"  style={{display: this.state.defaultquestion === \"填空题\" ? \"block\" : \"none\"}}>\r\n                                        <Form>\r\n                                            <Form.Item\r\n                                                name=\"gapTitle\"\r\n                                                label=\"题目\"\r\n                                                rules={[{ required: true, message: 'Please input your password!' }]}\r\n                                            >\r\n                                                <TextArea placeholder=\"题目\" onChange={(e) => this.handleTitleChange(e)}/>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"答案\"\r\n                                                name=\"gapOption\"\r\n                                                rules={[{ required: true, message: 'Please input your password!' }]}\r\n                                                style={{fontFamily:\"monospace\"}}\r\n                                            >\r\n                                                    {\r\n                                                        [...Array(this.state.gaptype.optionlength)].map((el,i) => {\r\n                                                            return(\r\n                                                                <Input addonBefore={String.fromCharCode(65 + i*1)} id={\"gapoption\" + i} key={\"gapoption\" + i} onChange={(e) => this.handleOptionChange(e)}/>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                <Button onClick={() => {this.setState({optiondefault: 1})}}>点击增加</Button>\r\n                                                <Button onClick={() => {this.setState({optiondefault: 2})}}>点击减少</Button>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"gapAnalyze\"\r\n                                                label=\"解析\"\r\n                                            >\r\n                                                <TextArea onChange={(e) => this.handleAnalyzeChange(e)}></TextArea>\r\n                                            </Form.Item>\r\n                                        </Form>\r\n                                    </div>\r\n                                    <div className=\"short\"  style={{display: this.state.defaultquestion === \"简答题\" ? \"block\" : \"none\"}}>\r\n                                    <Form>\r\n                                            <Form.Item\r\n                                                name=\"gapTitle\"\r\n                                                label=\"题目\"\r\n                                                rules={[{ required: true}]}\r\n                                            >\r\n                                                <TextArea placeholder=\"题目\" onChange={(e) => this.handleTitleChange(e)}/>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"答案\"\r\n                                                name=\"shortOption\"\r\n                                                rules={[{ required: true, message: 'Please input your password!' }]}\r\n                                                style={{fontFamily:\"monospace\"}}\r\n                                            >\r\n                                                <TextArea onChange={(e) => this.handleValueClick(e)}></TextArea>\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"gapAnalyze\"\r\n                                                label=\"解析\"\r\n                                            >\r\n                                                <TextArea onChange={(e) => this.handleAnalyzeChange(e)}></TextArea>\r\n                                            </Form.Item>\r\n                                        </Form>\r\n                                    </div>\r\n                                    <div style={{display: this.state.warning === \"\" ? \"none\" : \"block\", color: \"red\"}}>{this.state.warning}</div>\r\n                                </div>\r\n                            </div>\r\n                        </Modal>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                    {...formItemLayout}\r\n                        name=\"paperpreview\"\r\n                        label=\"考卷预览\"\r\n                    >\r\n                        <div ref={this.paperPreviewRef} className={style[\"paperPreview\"]}>\r\n                            {\r\n                                this.state.paperPreviewValue.map((ele,i)=>{\r\n                                    if(ele.type === \"singletype\" || ele.type === \"multitype\"){\r\n                                    }\r\n                                    return (\r\n                                        <div className={style[\"paperPreviewQustion\"]} key={\"paperPreview\"+i}>\r\n                                            <div>{i + 1}：\r\n                                            {ele.type === \"singletype\" ? \"单选题\" : \"\"}\r\n                                            {ele.type === \"multitype\" ? \"多选题\" : \"\"}\r\n                                            {ele.type === \"judegtype\" ? \"判断题\" : \"\"}\r\n                                            {ele.type === \"gaptype\" ? \"填空题\" : \"\"}\r\n                                            {ele.type === \"shorttype\" ? \"简答题\" : \"\"}\r\n                                            </div>\r\n                                            <div className={style[\"paperPreviewBlock\"]}>\r\n                                                <div>题目：</div>\r\n                                                <div>{ele.title}</div>\r\n                                            </div>\r\n                                            {\r\n                                               (ele.type === \"singletype\" || ele.type === \"multitype\") ?\r\n                                               (<div className={style[\"paperPreviewBlock\"]}>\r\n                                                    <div>选项：</div>\r\n                                                    <div>\r\n                                                        {ele.option.map((el,i) => {return(<p key={i}>{String.fromCharCode(65 + i*1) + \"：\" + el}</p>)})}\r\n                                                    </div>\r\n                                                </div>)\r\n                                                :\"\"\r\n                                            }\r\n                                            <div className={style[\"paperPreviewBlock\"]}>\r\n                                                <div>答案：</div>\r\n                                                {\r\n                                                    ele.type !== \"gaptype\" \r\n                                                    ? (<div>{ele.answer}</div>)\r\n                                                    : (<div>\r\n                                                        {ele.option.map((el,i) => {return(<p key={i}>{String.fromCharCode(65 + i*1) + \"：\" + el}</p>)})}\r\n                                                      </div>)\r\n                                                }\r\n                                            </div>\r\n                                            <div className={style[\"paperPreviewBlock\"]}>\r\n                                                <div>解析：</div>\r\n                                                <div>{ele.analyze}</div>\r\n                                            </div>\r\n                                            <div className={style[\"paperPreviewBlock\"]}>\r\n                                                <Button onClick={(i) => this.deletePreviewQustion(i)}>删除</Button>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        {...addButtonLayout}\r\n                        name=\"paperaddquestion\"\r\n                    >\r\n                        <Button type=\"primary\">保存</Button>\r\n                        <Button\r\n                            htmlType=\"submit\" \r\n                            style={{\r\n                                margin: '0 10px',\r\n                            }}\r\n                        >\r\n                            提交\r\n                        </Button>\r\n                        <Button htmlType=\"reset\"  type=\"dashed\">\r\n                            重置\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default class PublisherMod extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"\">\r\n                    <CreateTest key=\"createTest\" username={this.props.username} paperno={this.props.paperno}></CreateTest>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\JAVASCRIPT\\online-epidemic\\src\\components\\CreatePaperList\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserInformation\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserInformation\\ChangePassword\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\UserInformation\\ChangeInformation\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\CreateTopicList\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\CreateTopicList\\Topiclist\\index.jsx",[],"D:\\JAVASCRIPT\\online-epidemic\\src\\components\\CreateTopicList\\CreateTopic\\index.jsx",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":4,"column":31,"nodeType":"137","messageId":"138","endLine":4,"endColumn":37},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]